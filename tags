!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AA	lib/sha1.c	43;"	d	file:
AES_BLOCK_NBYTES	lib/aes.h	11;"	d
AES_H_	lib/aes.h	9;"	d
AES_KEY_128	lib/aes.h	/^	AES_KEY_128,$/;"	e	enum:__anon1
AES_KEY_192	lib/aes.h	/^	AES_KEY_192,$/;"	e	enum:__anon1
AES_KEY_256	lib/aes.h	/^	AES_KEY_256$/;"	e	enum:__anon1
AES_KEY_UNKNOWN	lib/aes.h	/^	AES_KEY_UNKNOWN,$/;"	e	enum:__anon1
AES_NB	lib/aes.c	21;"	d	file:
AES_NR_MAX	lib/aes.c	22;"	d	file:
ARRAY_SIZE	include/macros.h	11;"	d
ARRAY_SIZE	lib/macros.h	11;"	d
BASE	include/yarrow_init.h	4;"	d
BB	lib/sha1.c	54;"	d	file:
BE32_FROM_PTR	lib/sha1.c	27;"	d	file:
BE32_FROM_PTR	lib/sha256.c	19;"	d	file:
BLOCK_SIZE	include/prng.h	4;"	d
BSIG0	lib/sha256.c	98;"	d	file:
BSIG1	lib/sha256.c	99;"	d	file:
BUFFER_SZ	src/yarrow.c	13;"	d	file:
BYTE_ROL	lib/sbox.c	8;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CC	lib/Makefile	/^CC = gcc$/;"	m
CC	lib/sha1.c	65;"	d	file:
CFLAGS	Makefile	/^CFLAGS = -Wall -O2 -fomit-frame-pointer -ggdb -D_GNU_SOURCE -D_XOPEN_SOUCE=600$/;"	m
CFLAGS	lib/Makefile	/^CFLAGS = -Wall -O2 -fomit-frame-pointer -ggdb -D_GNU_SOURCE -D_XOPEN_SOUCE=600$/;"	m
CH	lib/sha256.c	96;"	d	file:
CIPHER_AES	include/cipher_desc.h	12;"	d
CIPHER_GOST	include/cipher_desc.h	11;"	d
CIPHER_IDEA	include/cipher_desc.h	13;"	d
COMMON_H_	include/common.h	2;"	d
COMMON_H_	lib/common.h	2;"	d
COUNTER_SIZE	include/prng.h	5;"	d
CRLF	lib/idea.h	9;"	d
DD	lib/sha1.c	76;"	d	file:
DEBUG_ONLY	include/macros.h	14;"	d
DEBUG_ONLY	include/macros.h	16;"	d
DEBUG_ONLY	lib/macros.h	14;"	d
DEBUG_ONLY	lib/macros.h	16;"	d
DECRYPT	src/prng.c	12;"	d	file:
DEFAULT_K	src/yarrow.c	12;"	d	file:
DEFAULT_SOCK_PATH	include/yarrow_init.h	1;"	d
ENCRYPT	src/prng.c	11;"	d	file:
EPOOL_FAIL	include/entropy_pool.h	/^	EPOOL_FAIL = 1$/;"	e	enum:__anon2
EPOOL_OK	include/entropy_pool.h	/^	EPOOL_OK = 0,$/;"	e	enum:__anon2
ESTIMATE_DIVIDER	include/feed_entropy.h	4;"	d
EntropyHash	src/yarrow_init.c	/^	EntropyHash, $/;"	e	enum:__anon3	file:
F	lib/md5.c	21;"	d	file:
FALSE	include/macros.h	5;"	d
FALSE	lib/macros.h	5;"	d
FETCH_U32	lib/md5.c	83;"	d	file:
FETCH_U32	lib/md5.c	85;"	d	file:
FF	lib/md5.c	36;"	d	file:
FIFO_PATH	include/yarrow_init.h	3;"	d
FIFO_PATH	tester/serv_fifo.c	18;"	d	file:
FIFO_PATH	tester/sock_serv.c	17;"	d	file:
FREE_CONTEXT	src/prng.c	13;"	d	file:
G	lib/md5.c	22;"	d	file:
GALOIS_H_	lib/galois.h	2;"	d
GAMMA_LEFT	lib/gost.c	30;"	d	file:
GENERATING_POLY	lib/galois.c	6;"	d	file:
GG	lib/md5.c	43;"	d	file:
GOST_2EXP32M1	lib/gost.c	28;"	d	file:
GOST_BLOCK_LEN	lib/gost.h	27;"	d
GOST_GAMMA_C1	lib/gost.c	26;"	d	file:
GOST_GAMMA_C2	lib/gost.c	27;"	d	file:
GOST_H_	lib/gost.h	22;"	d
GOST_KEY_NELEMS	lib/gost.h	26;"	d
GOST_KEY_SIZE	lib/gost.h	25;"	d
GOST_SBOX_NELEMS	lib/gost.h	24;"	d
GateParam	src/yarrow_init.c	/^	TimeParam, GateParam,$/;"	e	enum:__anon3	file:
H	lib/md5.c	23;"	d	file:
HASH_FINAL	src/yarrow.c	17;"	d	file:
HASH_INIT	src/yarrow.c	15;"	d	file:
HASH_MD5	include/hash_desc.h	16;"	d
HASH_SHA1	include/hash_desc.h	17;"	d
HASH_SHA256	include/hash_desc.h	18;"	d
HASH_UPDATE	src/yarrow.c	16;"	d	file:
HH	lib/md5.c	50;"	d	file:
I	lib/md5.c	24;"	d	file:
IDEA_BLOCK_NBYTES	lib/idea.h	6;"	d
IDEA_KEY_NELEMS	lib/idea.h	4;"	d
IDEA_KEY_SIZE	lib/idea.h	5;"	d
IDEA_ROUND_KEY_NELEMS	lib/idea.h	7;"	d
II	lib/md5.c	57;"	d	file:
INCLUDES	Makefile	/^INCLUDES = -I .\/include\/ -I .\/lib\/  $/;"	m
INIT	src/prng.c	10;"	d	file:
INLUDES	lib/Makefile	/^INLUDES = -I ..\/include $/;"	m
K	src/yarrow_init.c	/^	K,$/;"	e	enum:__anon3	file:
K00	lib/sha256.c	31;"	d	file:
K01	lib/sha256.c	32;"	d	file:
K02	lib/sha256.c	33;"	d	file:
K03	lib/sha256.c	34;"	d	file:
K04	lib/sha256.c	35;"	d	file:
K05	lib/sha256.c	36;"	d	file:
K06	lib/sha256.c	37;"	d	file:
K07	lib/sha256.c	38;"	d	file:
K08	lib/sha256.c	39;"	d	file:
K09	lib/sha256.c	40;"	d	file:
K10	lib/sha256.c	41;"	d	file:
K11	lib/sha256.c	42;"	d	file:
K12	lib/sha256.c	43;"	d	file:
K13	lib/sha256.c	44;"	d	file:
K14	lib/sha256.c	45;"	d	file:
K15	lib/sha256.c	46;"	d	file:
K16	lib/sha256.c	47;"	d	file:
K17	lib/sha256.c	48;"	d	file:
K18	lib/sha256.c	49;"	d	file:
K19	lib/sha256.c	50;"	d	file:
K20	lib/sha256.c	51;"	d	file:
K21	lib/sha256.c	52;"	d	file:
K22	lib/sha256.c	53;"	d	file:
K23	lib/sha256.c	54;"	d	file:
K24	lib/sha256.c	55;"	d	file:
K25	lib/sha256.c	56;"	d	file:
K26	lib/sha256.c	57;"	d	file:
K27	lib/sha256.c	58;"	d	file:
K28	lib/sha256.c	59;"	d	file:
K29	lib/sha256.c	60;"	d	file:
K30	lib/sha256.c	61;"	d	file:
K31	lib/sha256.c	62;"	d	file:
K32	lib/sha256.c	63;"	d	file:
K33	lib/sha256.c	64;"	d	file:
K34	lib/sha256.c	65;"	d	file:
K35	lib/sha256.c	66;"	d	file:
K36	lib/sha256.c	67;"	d	file:
K37	lib/sha256.c	68;"	d	file:
K38	lib/sha256.c	69;"	d	file:
K39	lib/sha256.c	70;"	d	file:
K40	lib/sha256.c	71;"	d	file:
K41	lib/sha256.c	72;"	d	file:
K42	lib/sha256.c	73;"	d	file:
K43	lib/sha256.c	74;"	d	file:
K44	lib/sha256.c	75;"	d	file:
K45	lib/sha256.c	76;"	d	file:
K46	lib/sha256.c	77;"	d	file:
K47	lib/sha256.c	78;"	d	file:
K48	lib/sha256.c	79;"	d	file:
K49	lib/sha256.c	80;"	d	file:
K50	lib/sha256.c	81;"	d	file:
K51	lib/sha256.c	82;"	d	file:
K52	lib/sha256.c	83;"	d	file:
K53	lib/sha256.c	84;"	d	file:
K54	lib/sha256.c	85;"	d	file:
K55	lib/sha256.c	86;"	d	file:
K56	lib/sha256.c	87;"	d	file:
K57	lib/sha256.c	88;"	d	file:
K58	lib/sha256.c	89;"	d	file:
K59	lib/sha256.c	90;"	d	file:
K60	lib/sha256.c	91;"	d	file:
K61	lib/sha256.c	92;"	d	file:
K62	lib/sha256.c	93;"	d	file:
K63	lib/sha256.c	94;"	d	file:
LE32	lib/aes.c	26;"	d	file:
LE32	lib/aes.c	29;"	d	file:
LE32_FROM_BYTES	lib/aes.c	35;"	d	file:
LE32_FROM_BYTES	lib/aes.c	39;"	d	file:
MACROS_H_	include/macros.h	2;"	d
MACROS_H_	lib/macros.h	2;"	d
MAJ	lib/sha256.c	97;"	d	file:
MASK	include/prng.h	10;"	d
MAXKEY	include/prng_desc.h	5;"	d
MAX_DIGEST	include/hash_desc.h	11;"	d
MAX_LENGHT_NAME	include/yarrow_init.h	5;"	d
MAX_SOURCES	include/entropy_pool.h	6;"	d
MD5_DIGEST_LEN	lib/md5.h	8;"	d
MD5_H_	lib/md5.h	2;"	d
MIN_BUF_USED	include/prng.h	7;"	d
MIN_TIME_PARAM	include/prng.h	8;"	d
NELEMS	src/yarrow_init.c	17;"	d	file:
NELEMS	tester/serv_fifo.c	20;"	d	file:
NELEMS	tester/sock_serv.c	19;"	d	file:
Nsources	src/yarrow_init.c	/^	Nsources,$/;"	e	enum:__anon3	file:
Options	src/yarrow_init.c	/^}	Options;$/;"	t	typeref:struct:__anon5	file:
PACKET_SIZE	include/yarrow_init.h	2;"	d
PACKET_SIZE	tester/serv_fifo.c	19;"	d	file:
PACKET_SIZE	tester/sock_serv.c	18;"	d	file:
POLY_VECTOR	lib/sbox.c	7;"	d	file:
PRNG_AES	include/prng_desc.h	8;"	d
PRNG_GOST	include/prng_desc.h	7;"	d
PRTCHAR	lib/test.c	116;"	d	file:
PrngCipher	src/yarrow_init.c	/^	PrngCipher, PrngHash,$/;"	e	enum:__anon3	file:
PrngHash	src/yarrow_init.c	/^	PrngCipher, PrngHash,$/;"	e	enum:__anon3	file:
QUOTE	src/yarrow_init.c	350;"	d	file:
RIJNDAEL_POLY	lib/galois.c	7;"	d	file:
ROL	lib/md5.c	26;"	d	file:
ROL32	lib/sha1.c	32;"	d	file:
ROL32	lib/sha256.c	24;"	d	file:
ROR32	lib/sha1.c	36;"	d	file:
ROR32	lib/sha256.c	28;"	d	file:
SBOX	lib/gost.c	141;"	d	file:
SBOX_H_	lib/sbox.h	2;"	d
SET_KEY	src/prng.c	14;"	d	file:
SHA1_DIGEST_LEN	lib/sha1.h	4;"	d
SHA1_H_	lib/sha1.h	2;"	d
SHA256_BASIC	lib/sha256.c	103;"	d	file:
SHA256_DIGEST_LEN	lib/sha256.h	4;"	d
SHA256_H_	lib/sha256.h	2;"	d
SOCK_UNIX_H_	include/sock-unix.h	5;"	d
SSIG0	lib/sha256.c	100;"	d	file:
SSIG1	lib/sha256.c	101;"	d	file:
SSIZE_MAX	src/yarrow_init.c	15;"	d	file:
SSIZE_MAX	tester/serv_fifo.c	17;"	d	file:
SSIZE_MAX	tester/sock_serv.c	16;"	d	file:
STORAGE_SIZE	include/prng.h	6;"	d
ServerOpCodes	src/yarrow_init.c	/^} ServerOpCodes;$/;"	t	typeref:enum:__anon3	file:
T0	lib/sha1.c	39;"	d	file:
T00	lib/md5.c	65;"	d	file:
T01	lib/md5.c	66;"	d	file:
T02	lib/md5.c	67;"	d	file:
T03	lib/md5.c	68;"	d	file:
T1	lib/sha1.c	40;"	d	file:
T10	lib/md5.c	69;"	d	file:
T11	lib/md5.c	70;"	d	file:
T12	lib/md5.c	71;"	d	file:
T13	lib/md5.c	72;"	d	file:
T2	lib/sha1.c	41;"	d	file:
T20	lib/md5.c	73;"	d	file:
T21	lib/md5.c	74;"	d	file:
T22	lib/md5.c	75;"	d	file:
T23	lib/md5.c	76;"	d	file:
T30	lib/md5.c	77;"	d	file:
T31	lib/md5.c	78;"	d	file:
T32	lib/md5.c	79;"	d	file:
T33	lib/md5.c	80;"	d	file:
TRUE	include/macros.h	8;"	d
TRUE	lib/macros.h	8;"	d
TimeParam	src/yarrow_init.c	/^	TimeParam, GateParam,$/;"	e	enum:__anon3	file:
VPATH	Makefile	/^VPATH = .\/src$/;"	m
WHITESPACE	src/yarrow_init.c	349;"	d	file:
YARROW_H_	include/yarrow.h	2;"	d
_ENTROPY_POOL_H	include/entropy_pool.h	3;"	d
_HASH_H	include/hash_desc.h	9;"	d
_IDEA_H	lib/idea.h	2;"	d
_PRNG_H	include/prng_desc.h	2;"	d
__BIG_ENDIAN	lib/common.h	46;"	d
__BYTE_ORDER	lib/common.h	30;"	d
__BYTE_ORDER	lib/common.h	38;"	d
__CIPHER_DESC_H	include/cipher_desc.h	3;"	d
__FEED_ENTROPY	include/feed_entropy.h	2;"	d
__LITTLE_ENDIAN	lib/common.h	29;"	d
__LITTLE_ENDIAN	lib/common.h	42;"	d
__PRNG_H	include/prng.h	2;"	d
__anon4::name	src/yarrow_init.c	/^	char *name;$/;"	m	struct:__anon4	file:	access:public
__anon4::opcode	src/yarrow_init.c	/^	ServerOpCodes opcode;$/;"	m	struct:__anon4	file:	access:public
__anon5::entropy_hash	src/yarrow_init.c	/^	char entropy_hash[16];$/;"	m	struct:__anon5	file:	access:public
__anon5::estimate	src/yarrow_init.c	/^	double estimate[MAX_SOURCES];$/;"	m	struct:__anon5	file:	access:public
__anon5::fthreshold	src/yarrow_init.c	/^	float fthreshold[MAX_SOURCES];$/;"	m	struct:__anon5	file:	access:public
__anon5::gate_param	src/yarrow_init.c	/^	int gate_param;$/;"	m	struct:__anon5	file:	access:public
__anon5::k	src/yarrow_init.c	/^	int k;$/;"	m	struct:__anon5	file:	access:public
__anon5::nsources	src/yarrow_init.c	/^	int nsources;$/;"	m	struct:__anon5	file:	access:public
__anon5::path_to_src	src/yarrow_init.c	/^	char path_to_src[MAX_SOURCES][MAX_LENGHT_NAME]; \/\/paths to sources $/;"	m	struct:__anon5	file:	access:public
__anon5::prng_cipher	src/yarrow_init.c	/^	char prng_cipher[16];$/;"	m	struct:__anon5	file:	access:public
__anon5::prng_hash	src/yarrow_init.c	/^	char prng_hash[16];$/;"	m	struct:__anon5	file:	access:public
__anon5::sthreshold	src/yarrow_init.c	/^	float sthreshold[MAX_SOURCES];$/;"	m	struct:__anon5	file:	access:public
__anon5::time_param	src/yarrow_init.c	/^	int time_param;$/;"	m	struct:__anon5	file:	access:public
_cipher_ctx	include/cipher_desc.h	/^union _cipher_ctx {$/;"	u
_cipher_ctx::gost	include/cipher_desc.h	/^	struct gost_context gost; $/;"	m	union:_cipher_ctx	typeref:struct:_cipher_ctx::gost_context	access:public
_cipher_ctx::idea	include/cipher_desc.h	/^	struct idea_context idea;$/;"	m	union:_cipher_ctx	typeref:struct:_cipher_ctx::idea_context	access:public
_hash_ctx	include/hash_desc.h	/^union _hash_ctx {$/;"	u
_hash_ctx::md5	include/hash_desc.h	/^		struct md5_context md5; $/;"	m	union:_hash_ctx	typeref:struct:_hash_ctx::md5_context	access:public
_hash_ctx::sha1	include/hash_desc.h	/^		struct sha1_context sha1;$/;"	m	union:_hash_ctx	typeref:struct:_hash_ctx::sha1_context	access:public
_hash_ctx::sha256	include/hash_desc.h	/^		struct sha256_context sha256;$/;"	m	union:_hash_ctx	typeref:struct:_hash_ctx::sha256_context	access:public
accept_connect	src/yarrow_init.c	/^accept_connect(int *nelems)$/;"	f	signature:(int *nelems)
accept_connect	tester/serv_fifo.c	/^accept_connect(int *nelems)$/;"	f	signature:(int *nelems)
accept_connect	tester/sock_serv.c	/^accept_connect(int *nelems)$/;"	f	signature:(int *nelems)
accumulate_entropy	src/yarrow_init.c	/^accumulate_entropy(struct prng_context *prng)$/;"	f	signature:(struct prng_context *prng)
accumulate_entropy	tester/serv_fifo.c	/^accumulate_entropy()$/;"	f
accumulate_entropy	tester/sock_serv.c	/^accumulate_entropy (char *buf)$/;"	f	signature:(char *buf)
accumulate_samples	src/yarrow_init.c	/^accumulate_samples(int id) $/;"	f	signature:(int id)
accumulate_samples	tester/serv_fifo.c	/^accumulate_samples(int id) $/;"	f	signature:(int id)
accumulate_samples	tester/sock_serv.c	/^accumulate_samples(int id) $/;"	f	signature:(int id)
add_round_key	lib/aes.c	/^add_round_key(struct aes_context *ctx, int round)$/;"	f	file:	signature:(struct aes_context *ctx, int round)
add_to_fast	src/test.c	/^int add_to_fast[MAX_SOURCES];$/;"	v
add_to_fast	src/yarrow_init.c	/^int add_to_fast[MAX_SOURCES];$/;"	v
addinv	lib/idea.c	/^addinv(u_int16_t x)$/;"	f	signature:(u_int16_t x)
addinv	lib/idea.h	/^u_int16_t addinv(u_int16_t x);$/;"	p	signature:(u_int16_t x)
aes_context	lib/aes.c	/^struct aes_context {$/;"	s	file:
aes_context::key	lib/aes.c	/^	u_int32_t	key[8];$/;"	m	struct:aes_context	file:	access:public
aes_context::klen	lib/aes.c	/^	aes_key_len_t	klen;$/;"	m	struct:aes_context	file:	access:public
aes_context::nb	lib/aes.c	/^	int		nb;$/;"	m	struct:aes_context	file:	access:public
aes_context::nk	lib/aes.c	/^	int		nk;$/;"	m	struct:aes_context	file:	access:public
aes_context::nr	lib/aes.c	/^	int		nr;$/;"	m	struct:aes_context	file:	access:public
aes_context::state	lib/aes.c	/^	u_int32_t	state[AES_NB];$/;"	m	struct:aes_context	file:	access:public
aes_context::w	lib/aes.c	/^	u_int32_t	w[AES_NB*(AES_NR_MAX+1)];$/;"	m	struct:aes_context	file:	access:public
aes_context_free	lib/aes.c	/^aes_context_free(struct aes_context **ctx)$/;"	f	signature:(struct aes_context **ctx)
aes_context_free	lib/aes.h	/^void aes_context_free(struct aes_context **ctx);$/;"	p	signature:(struct aes_context **ctx)
aes_context_new	lib/aes.c	/^aes_context_new()$/;"	f
aes_context_new	lib/aes.h	/^struct aes_context *aes_context_new();$/;"	p	signature:()
aes_decrypt	lib/aes.c	/^aes_decrypt(struct aes_context *ctx, const u_int8_t *in, u_int8_t *out)$/;"	f	signature:(struct aes_context *ctx, const u_int8_t *in, u_int8_t *out)
aes_decrypt	lib/aes.h	/^void aes_decrypt(struct aes_context *ctx, const u_int8_t *in, u_int8_t *out);$/;"	p	signature:(struct aes_context *ctx, const u_int8_t *in, u_int8_t *out)
aes_encrypt	lib/aes.c	/^aes_encrypt(struct aes_context *ctx, const u_int8_t *in, u_int8_t *out)$/;"	f	signature:(struct aes_context *ctx, const u_int8_t *in, u_int8_t *out)
aes_encrypt	lib/aes.h	/^void aes_encrypt(struct aes_context *ctx, const u_int8_t *in, u_int8_t *out);$/;"	p	signature:(struct aes_context *ctx, const u_int8_t *in, u_int8_t *out)
aes_init	lib/aes.c	/^aes_init()$/;"	f
aes_init	lib/aes.h	/^void aes_init();$/;"	p	signature:()
aes_key_len_t	lib/aes.h	/^} aes_key_len_t;$/;"	t	typeref:enum:__anon1
aes_set_key	lib/aes.c	/^aes_set_key(struct aes_context *ctx, const void *key, aes_key_len_t klen)$/;"	f	signature:(struct aes_context *ctx, const void *key, aes_key_len_t klen)
aes_set_key	lib/aes.h	/^int aes_set_key(struct aes_context *ctx, const void *key, aes_key_len_t klen);$/;"	p	signature:(struct aes_context *ctx, const void *key, aes_key_len_t klen)
assert	include/macros.h	59;"	d
assert	lib/macros.h	44;"	d
assert	lib/macros.h	59;"	d
attr_table	src/yarrow_init.c	/^} attr_table [] = { $/;"	v	typeref:struct:__anon4	file:
binaries	Makefile	/^binaries = yarrow_init $/;"	m
block_size	include/cipher_desc.h	/^	int block_size;$/;"	m	struct:cipher_desc	access:public
buf	src/yarrow_init.c	/^	unsigned char buf[LINE_MAX+1];$/;"	m	struct:peer	file:	access:public
buf	tester/serv_fifo.c	/^	char buf[LINE_MAX+1];$/;"	m	struct:peer	file:	access:public
buf	tester/sock_serv.c	/^	char buf[LINE_MAX+1];$/;"	m	struct:peer	file:	access:public
buffer	include/entropy_pool.h	/^	unsigned char buffer[MAX_DIGEST];$/;"	m	struct:entropy_pool	access:public
buffer	lib/md5.h	/^	uint8_t	buffer[64];	\/* message buffer *\/$/;"	m	struct:md5_context	access:public
buffer	lib/sha1.h	/^        u_int8_t         buffer[64];     \/* 512-bit message buffer *\/$/;"	m	struct:sha1_context	access:public
buffer	lib/sha256.h	/^        uint8_t         buffer[64];     \/* 512-bit message buffer *\/$/;"	m	struct:sha256_context	access:public
bufused	src/yarrow_init.c	/^	int bufused;$/;"	m	struct:peer	file:	access:public
bufused	tester/serv_fifo.c	/^	int bufused;$/;"	m	struct:peer	file:	access:public
bufused	tester/sock_serv.c	/^	int bufused;$/;"	m	struct:peer	file:	access:public
build_send_replay	src/yarrow_init.c	/^build_send_replay(struct peer *p, struct prng_context *prng)$/;"	f	signature:(struct peer *p, struct prng_context *prng)
cdesc	include/prng.h	/^	struct cipher_desc *cdesc;$/;"	m	struct:prng_context	typeref:struct:prng_context::cipher_desc	access:public
cipher_ctx	include/prng.h	/^	union _cipher_ctx *cipher_ctx;$/;"	m	struct:prng_context	typeref:union:prng_context::_cipher_ctx	access:public
cipher_desc	include/cipher_desc.h	/^struct cipher_desc {$/;"	s
cipher_desc::block_size	include/cipher_desc.h	/^	int block_size;$/;"	m	struct:cipher_desc	access:public
cipher_desc::context_free	include/cipher_desc.h	/^	void (*context_free)(void **ctx);$/;"	m	struct:cipher_desc	access:public
cipher_desc::context_new	include/cipher_desc.h	/^	void *(*context_new)();$/;"	m	struct:cipher_desc	access:public
cipher_desc::decrypt	include/cipher_desc.h	/^	void (*decrypt)(void *ctx, void *block);$/;"	m	struct:cipher_desc	access:public
cipher_desc::encrypt	include/cipher_desc.h	/^	void (*encrypt)(void *ctx, void *block);$/;"	m	struct:cipher_desc	access:public
cipher_desc::key_size	include/cipher_desc.h	/^	int key_size;$/;"	m	struct:cipher_desc	access:public
cipher_desc::name	include/cipher_desc.h	/^	const char *name;$/;"	m	struct:cipher_desc	access:public
cipher_desc::set_key	include/cipher_desc.h	/^	void (*set_key)(void *ctx, void *key);$/;"	m	struct:cipher_desc	access:public
cipher_desc_get	include/cipher_desc.h	/^struct cipher_desc *cipher_desc_get(const char *cipher_name);$/;"	p	signature:(const char *cipher_name)
cipher_desc_get	src/cipher_desc.c	/^cipher_desc_get(const char *cipher_name)$/;"	f	signature:(const char *cipher_name)
cipher_desc_tbl	src/prng.c	/^struct cipher_desc cipher_desc_tbl[] = {$/;"	v	typeref:struct:cipher_desc
context_free	include/cipher_desc.h	/^	void (*context_free)(void **ctx);$/;"	m	struct:cipher_desc	access:public
context_new	include/cipher_desc.h	/^	void *(*context_new)();$/;"	m	struct:cipher_desc	access:public
convert_to_hex	src/yarrow_init.c	/^void convert_to_hex(unsigned char *src, unsigned char *dst, int n) $/;"	f	signature:(unsigned char *src, unsigned char *dst, int n)
count	lib/sha1.h	/^        u_int32_t        count[2];       \/* data length counter *\/$/;"	m	struct:sha1_context	access:public
count	lib/sha256.h	/^        uint32_t        count[2];       \/* data length counter *\/$/;"	m	struct:sha256_context	access:public
counter	include/prng.h	/^	u_int32_t counter[COUNTER_SIZE]; $/;"	m	struct:prng_context	access:public
crypto	Makefile	/^crypto = .\/lib\/crypto.a$/;"	m
crypto	lib/Makefile	/^crypto = crypto.a$/;"	m
dec_to_hex	tester/serv_fifo.c	/^dec_to_hex(int val, char *str)$/;"	f	signature:(int val, char *str)
decrypt	include/cipher_desc.h	/^	void (*decrypt)(void *ctx, void *block);$/;"	m	struct:cipher_desc	access:public
digest_len	include/hash_desc.h	/^	int digest_len;$/;"	m	struct:hash_desc	access:public
encrypt	include/cipher_desc.h	/^	void (*encrypt)(void *ctx, void *block);$/;"	m	struct:cipher_desc	access:public
entropy_hash	src/yarrow_init.c	/^	char entropy_hash[16];$/;"	m	struct:__anon5	file:	access:public
entropy_pool	include/entropy_pool.h	/^struct entropy_pool {$/;"	s
entropy_pool::buffer	include/entropy_pool.h	/^	unsigned char buffer[MAX_DIGEST];$/;"	m	struct:entropy_pool	access:public
entropy_pool::estimate	include/entropy_pool.h	/^	float estimate[MAX_SOURCES];$/;"	m	struct:entropy_pool	access:public
entropy_pool::hash_ctx	include/entropy_pool.h	/^	union _hash_ctx hash_ctx;$/;"	m	struct:entropy_pool	typeref:union:entropy_pool::_hash_ctx	access:public
entropy_pool::hdesc	include/entropy_pool.h	/^	struct hash_desc *hdesc;$/;"	m	struct:entropy_pool	typeref:struct:entropy_pool::hash_desc	access:public
entropy_pool::k	include/entropy_pool.h	/^	int k;$/;"	m	struct:entropy_pool	access:public
entropy_pool::nsources	include/entropy_pool.h	/^	int nsources;$/;"	m	struct:entropy_pool	access:public
entropy_pool::threshold	include/entropy_pool.h	/^	float threshold[MAX_SOURCES];$/;"	m	struct:entropy_pool	access:public
entropy_pool_add	include/entropy_pool.h	/^int entropy_pool_add(struct entropy_pool *pool, int source_id, const void *buf, size_t len, double estimate);$/;"	p	signature:(struct entropy_pool *pool, int source_id, const void *buf, size_t len, double estimate)
entropy_pool_add	src/yarrow.c	/^entropy_pool_add(struct entropy_pool *pool,$/;"	f	signature:(struct entropy_pool *pool, int source_id, const void *buf, size_t len, double estimate)
entropy_pool_bytes	include/entropy_pool.h	/^unsigned char *entropy_pool_bytes(const struct entropy_pool *pool);$/;"	p	signature:(const struct entropy_pool *pool)
entropy_pool_bytes	src/yarrow.c	/^entropy_pool_bytes(const struct entropy_pool *pool)$/;"	f	signature:(const struct entropy_pool *pool)
entropy_pool_clean	include/entropy_pool.h	/^void entropy_pool_clean(struct entropy_pool *pool);$/;"	p	signature:(struct entropy_pool *pool)
entropy_pool_clean	src/yarrow.c	/^entropy_pool_clean(struct entropy_pool *pool)$/;"	f	signature:(struct entropy_pool *pool)
entropy_pool_deinit	include/entropy_pool.h	/^int entropy_pool_deinit(struct entropy_pool *pool);$/;"	p	signature:(struct entropy_pool *pool)
entropy_pool_deinit	src/yarrow.c	/^entropy_pool_deinit(struct entropy_pool *pool)$/;"	f	signature:(struct entropy_pool *pool)
entropy_pool_feed_to	include/entropy_pool.h	/^int entropy_pool_feed_to(struct entropy_pool *dst, struct entropy_pool *src);$/;"	p	signature:(struct entropy_pool *dst, struct entropy_pool *src)
entropy_pool_feed_to	src/yarrow.c	/^entropy_pool_feed_to(struct entropy_pool *dst, struct entropy_pool *src)$/;"	f	signature:(struct entropy_pool *dst, struct entropy_pool *src)
entropy_pool_get_k	include/entropy_pool.h	/^int entropy_pool_get_k(struct entropy_pool *pool);$/;"	p	signature:(struct entropy_pool *pool)
entropy_pool_get_k	src/yarrow.c	/^entropy_pool_get_k(struct entropy_pool *pool)$/;"	f	signature:(struct entropy_pool *pool)
entropy_pool_get_nsources	include/entropy_pool.h	/^int entropy_pool_get_nsources(struct entropy_pool *pool);$/;"	p	signature:(struct entropy_pool *pool)
entropy_pool_get_nsources	src/yarrow.c	/^entropy_pool_get_nsources(struct entropy_pool *pool)$/;"	f	signature:(struct entropy_pool *pool)
entropy_pool_get_threshold	include/entropy_pool.h	/^double entropy_pool_get_threshold(struct entropy_pool *pool, int source_id);$/;"	p	signature:(struct entropy_pool *pool, int source_id)
entropy_pool_get_threshold	src/yarrow.c	/^entropy_pool_get_threshold(struct entropy_pool *pool, int source_id)$/;"	f	signature:(struct entropy_pool *pool, int source_id)
entropy_pool_init	include/entropy_pool.h	/^int entropy_pool_init(struct entropy_pool *pool, int nsources, const char *hash_name);$/;"	p	signature:(struct entropy_pool *pool, int nsources, const char *hash_name)
entropy_pool_init	src/yarrow.c	/^entropy_pool_init(struct entropy_pool *pool,$/;"	f	signature:(struct entropy_pool *pool, int nsources, const char *hash_name)
entropy_pool_is_thresholded	include/entropy_pool.h	/^int entropy_pool_is_thresholded(struct entropy_pool *pool);$/;"	p	signature:(struct entropy_pool *pool)
entropy_pool_is_thresholded	src/yarrow.c	/^entropy_pool_is_thresholded(struct entropy_pool *pool)$/;"	f	signature:(struct entropy_pool *pool)
entropy_pool_length	include/entropy_pool.h	/^unsigned int entropy_pool_length(const struct entropy_pool *pool);$/;"	p	signature:(const struct entropy_pool *pool)
entropy_pool_length	src/yarrow.c	/^entropy_pool_length(const struct entropy_pool *pool)$/;"	f	signature:(const struct entropy_pool *pool)
entropy_pool_set_k	include/entropy_pool.h	/^int entropy_pool_set_k(struct entropy_pool *pool, int k);$/;"	p	signature:(struct entropy_pool *pool, int k)
entropy_pool_set_k	src/yarrow.c	/^entropy_pool_set_k(struct entropy_pool *pool, int k)$/;"	f	signature:(struct entropy_pool *pool, int k)
entropy_pool_set_nsources	include/entropy_pool.h	/^int entropy_pool_set_nsources(struct entropy_pool *pool, int nsources);$/;"	p	signature:(struct entropy_pool *pool, int nsources)
entropy_pool_set_nsources	src/yarrow.c	/^entropy_pool_set_nsources(struct entropy_pool *pool, int nsources)$/;"	f	signature:(struct entropy_pool *pool, int nsources)
entropy_pool_set_threshold	include/entropy_pool.h	/^int entropy_pool_set_threshold(struct entropy_pool *pool, int source_id, double threshold);$/;"	p	signature:(struct entropy_pool *pool, int source_id, double threshold)
entropy_pool_set_threshold	src/yarrow.c	/^entropy_pool_set_threshold(struct entropy_pool *pool, int source_id, double threshold)$/;"	f	signature:(struct entropy_pool *pool, int source_id, double threshold)
entropy_source	tester/serv_fifo.c	/^struct entropy_source {$/;"	s	file:
entropy_source	tester/sock_serv.c	/^struct entropy_source {$/;"	s	file:
entropy_source::estimate	tester/serv_fifo.c	/^	int estimate;$/;"	m	struct:entropy_source	file:	access:public
entropy_source::estimate	tester/sock_serv.c	/^	double estimate;$/;"	m	struct:entropy_source	file:	access:public
entropy_source::id	tester/serv_fifo.c	/^	int id;$/;"	m	struct:entropy_source	file:	access:public
entropy_source::id	tester/sock_serv.c	/^	int id;$/;"	m	struct:entropy_source	file:	access:public
entropy_source::len	tester/serv_fifo.c	/^	int len;$/;"	m	struct:entropy_source	file:	access:public
entropy_source::len	tester/sock_serv.c	/^	int len;$/;"	m	struct:entropy_source	file:	access:public
entropy_source::path	tester/serv_fifo.c	/^	char *path;$/;"	m	struct:entropy_source	file:	access:public
entropy_source::path	tester/sock_serv.c	/^	char *path;$/;"	m	struct:entropy_source	file:	access:public
entropy_src	tester/serv_fifo.c	/^} entropy_src[32];$/;"	v	typeref:struct:entropy_source
entropy_src	tester/sock_serv.c	/^} entropy_src[2];$/;"	v	typeref:struct:entropy_source
estimate	include/entropy_pool.h	/^	float estimate[MAX_SOURCES];$/;"	m	struct:entropy_pool	access:public
estimate	src/yarrow_init.c	/^	double estimate[MAX_SOURCES];$/;"	m	struct:__anon5	file:	access:public
estimate	src/yarrow_init.c	/^	estimate,$/;"	e	enum:__anon3	file:
estimate	tester/serv_fifo.c	/^	int estimate;$/;"	m	struct:entropy_source	file:	access:public
estimate	tester/sock_serv.c	/^	double estimate;$/;"	m	struct:entropy_source	file:	access:public
exptab	lib/galois.c	/^static u_int8_t exptab[256];$/;"	v	file:
fast_pool	src/test.c	/^struct entropy_pool fast_pool, slow_pool;$/;"	v	typeref:struct:entropy_pool
fast_pool	src/yarrow_init.c	/^struct entropy_pool fast_pool, slow_pool;$/;"	v	typeref:struct:entropy_pool
feed_entropy	include/feed_entropy.h	/^void feed_entropy(int source_id, void *buf, int len, double estimate, struct prng_context *prng);$/;"	p	signature:(int source_id, void *buf, int len, double estimate, struct prng_context *prng)
feed_entropy	src/feed_entropy.c	/^feed_entropy(int source_id, void *buf, int len, double estimate, struct prng_context *prng)$/;"	f	signature:(int source_id, void *buf, int len, double estimate, struct prng_context *prng)
finalize	include/hash_desc.h	/^	void *(*finalize)(void *ctx, unsigned char digest[MAX_DIGEST]);$/;"	m	struct:hash_desc	access:public
find_unused_fd	src/yarrow_init.c	/^find_unused_fd(int *count)$/;"	f	signature:(int *count)
find_unused_fd	tester/serv_fifo.c	/^find_unused_fd(int *count)$/;"	f	signature:(int *count)
find_unused_fd	tester/sock_serv.c	/^find_unused_fd(int *count)$/;"	f	signature:(int *count)
fthreshold	src/yarrow_init.c	/^	float fthreshold[MAX_SOURCES];$/;"	m	struct:__anon5	file:	access:public
fthreshold	src/yarrow_init.c	/^	fthreshold,$/;"	e	enum:__anon3	file:
galois_add	lib/galois.c	/^galois_add(u_int8_t a, u_int8_t b)$/;"	f	signature:(u_int8_t a, u_int8_t b)
galois_add	lib/galois.h	/^u_int8_t galois_add(u_int8_t a, u_int8_t b);$/;"	p	signature:(u_int8_t a, u_int8_t b)
galois_div	lib/galois.c	/^galois_div(u_int8_t a, u_int8_t b)$/;"	f	signature:(u_int8_t a, u_int8_t b)
galois_div	lib/galois.h	/^u_int8_t galois_div(u_int8_t a, u_int8_t b);$/;"	p	signature:(u_int8_t a, u_int8_t b)
galois_init_tables	lib/galois.c	/^galois_init_tables()$/;"	f
galois_init_tables	lib/galois.h	/^void galois_init_tables();$/;"	p	signature:()
galois_mul	lib/galois.c	/^galois_mul(u_int8_t a, u_int8_t b)$/;"	f	signature:(u_int8_t a, u_int8_t b)
galois_mul	lib/galois.h	/^u_int8_t galois_mul(u_int8_t a, u_int8_t b);$/;"	p	signature:(u_int8_t a, u_int8_t b)
galois_mul_inverse	lib/galois.c	/^galois_mul_inverse(u_int8_t a)$/;"	f	signature:(u_int8_t a)
galois_mul_inverse	lib/galois.h	/^u_int8_t galois_mul_inverse(u_int8_t a);$/;"	p	signature:(u_int8_t a)
galois_mul_slow	lib/galois.c	/^galois_mul_slow(u_int8_t a, u_int8_t b)$/;"	f	signature:(u_int8_t a, u_int8_t b)
galois_mul_slow	lib/galois.h	/^u_int8_t galois_mul_slow(u_int8_t a, u_int8_t b);$/;"	p	signature:(u_int8_t a, u_int8_t b)
galois_print_tables	lib/galois.c	/^galois_print_tables()$/;"	f
galois_print_tables	lib/galois.h	/^void galois_print_tables();$/;"	p	signature:()
galois_sub	lib/galois.c	/^galois_sub(u_int8_t a, u_int8_t b)$/;"	f	signature:(u_int8_t a, u_int8_t b)
galois_sub	lib/galois.h	/^u_int8_t galois_sub(u_int8_t a, u_int8_t b);$/;"	p	signature:(u_int8_t a, u_int8_t b)
gamma	lib/gost.h	/^	u_int8_t gamma[8];$/;"	m	struct:gost_context	access:public
gate_param	include/prng.h	/^	int gate_param;$/;"	m	struct:prng_context	access:public
gate_param	src/yarrow_init.c	/^	int gate_param;$/;"	m	struct:__anon5	file:	access:public
get_arg	include/yarrow_init.h	/^char get_arg(char **line);$/;"	p	signature:(char **line)
gost	include/cipher_desc.h	/^	struct gost_context gost; $/;"	m	union:_cipher_ctx	typeref:struct:_cipher_ctx::gost_context	access:public
gost_apply_gamma	lib/gost.c	/^gost_apply_gamma(struct gost_context *ctx, void *data, int len)$/;"	f	signature:(struct gost_context *ctx, void *data, int len)
gost_apply_gamma	lib/gost.h	/^void gost_apply_gamma(struct gost_context *ctx, void *data, int len);$/;"	p	signature:(struct gost_context *ctx, void *data, int len)
gost_basic	lib/gost.c	/^gost_basic(u_int32_t *lo, u_int32_t *hi, u_int32_t key, const u_int8_t *sbox)$/;"	f	file:	signature:(u_int32_t *lo, u_int32_t *hi, u_int32_t key, const u_int8_t *sbox)
gost_basic	lib/gost.c	/^static void gost_basic(u_int32_t *lo, u_int32_t *hi, u_int32_t key, const u_int8_t *sbox);$/;"	p	file:	signature:(u_int32_t *lo, u_int32_t *hi, u_int32_t key, const u_int8_t *sbox)
gost_context	lib/gost.h	/^struct gost_context {$/;"	s
gost_context::gamma	lib/gost.h	/^	u_int8_t gamma[8];$/;"	m	struct:gost_context	access:public
gost_context::head	lib/gost.h	/^	u_int8_t *head;$/;"	m	struct:gost_context	access:public
gost_context::key	lib/gost.h	/^	u_int32_t key[8];$/;"	m	struct:gost_context	access:public
gost_context::sbox	lib/gost.h	/^	u_int8_t *sbox;$/;"	m	struct:gost_context	access:public
gost_context::tail	lib/gost.h	/^	u_int8_t *tail;$/;"	m	struct:gost_context	access:public
gost_context_free	lib/gost.c	/^gost_context_free(struct gost_context **ctx)$/;"	f	signature:(struct gost_context **ctx)
gost_context_free	lib/gost.h	/^void gost_context_free(struct gost_context **ctx);$/;"	p	signature:(struct gost_context **ctx)
gost_context_new	lib/gost.c	/^gost_context_new()$/;"	f
gost_context_new	lib/gost.h	/^struct gost_context *gost_context_new();$/;"	p	signature:()
gost_decrypt_32r	lib/gost.c	/^gost_decrypt_32r(struct gost_context *ctx, u_int32_t *block)$/;"	f	signature:(struct gost_context *ctx, u_int32_t *block)
gost_decrypt_32r	lib/gost.c	/^void gost_decrypt_32r(struct gost_context *ctx, u_int32_t *block);$/;"	p	file:	signature:(struct gost_context *ctx, u_int32_t *block)
gost_decrypt_32r	lib/gost.h	/^void gost_decrypt_32r(struct gost_context *ctx, u_int32_t *block);$/;"	p	signature:(struct gost_context *ctx, u_int32_t *block)
gost_encrypt_32z	lib/gost.c	/^gost_encrypt_32z(struct gost_context *ctx, u_int32_t *block)$/;"	f	signature:(struct gost_context *ctx, u_int32_t *block)
gost_encrypt_32z	lib/gost.c	/^void gost_encrypt_32z(struct gost_context *ctx, u_int32_t *block);$/;"	p	file:	signature:(struct gost_context *ctx, u_int32_t *block)
gost_encrypt_32z	lib/gost.h	/^void gost_encrypt_32z(struct gost_context *ctx, u_int32_t *block);$/;"	p	signature:(struct gost_context *ctx, u_int32_t *block)
gost_set_key	lib/gost.c	/^gost_set_key(struct gost_context *ctx, const u_int32_t *key)$/;"	f	signature:(struct gost_context *ctx, const u_int32_t *key)
gost_set_key	lib/gost.h	/^void gost_set_key(struct gost_context *ctx, const u_int32_t *key);$/;"	p	signature:(struct gost_context *ctx, const u_int32_t *key)
gost_set_sbox	lib/gost.c	/^gost_set_sbox(struct gost_context *ctx, const u_int8_t *sbox)$/;"	f	signature:(struct gost_context *ctx, const u_int8_t *sbox)
gost_set_sbox	lib/gost.h	/^int gost_set_sbox(struct gost_context *ctx, const u_int8_t *sbox);$/;"	p	signature:(struct gost_context *ctx, const u_int8_t *sbox)
gost_set_sync	lib/gost.c	/^gost_set_sync(struct gost_context *ctx, const u_int32_t *sync)$/;"	f	signature:(struct gost_context *ctx, const u_int32_t *sync)
gost_set_sync	lib/gost.h	/^void gost_set_sync(struct gost_context *ctx, const u_int32_t *sync);$/;"	p	signature:(struct gost_context *ctx, const u_int32_t *sync)
gost_update_gamma	lib/gost.c	/^gost_update_gamma(struct gost_context *ctx)$/;"	f	file:	signature:(struct gost_context *ctx)
hash_ctx	include/entropy_pool.h	/^	union _hash_ctx hash_ctx;$/;"	m	struct:entropy_pool	typeref:union:entropy_pool::_hash_ctx	access:public
hash_ctx	include/prng.h	/^	union _hash_ctx hash_ctx;$/;"	m	struct:prng_context	typeref:union:prng_context::_hash_ctx	access:public
hash_desc	include/hash_desc.h	/^struct hash_desc {$/;"	s
hash_desc::digest_len	include/hash_desc.h	/^	int digest_len;$/;"	m	struct:hash_desc	access:public
hash_desc::finalize	include/hash_desc.h	/^	void *(*finalize)(void *ctx, unsigned char digest[MAX_DIGEST]);$/;"	m	struct:hash_desc	access:public
hash_desc::init	include/hash_desc.h	/^	void (*init)(void *ctx);$/;"	m	struct:hash_desc	access:public
hash_desc::name	include/hash_desc.h	/^	const char *name;$/;"	m	struct:hash_desc	access:public
hash_desc::update	include/hash_desc.h	/^	void (*update)(void *ctx, const void *buf, size_t len);$/;"	m	struct:hash_desc	access:public
hash_desc_get	include/hash_desc.h	/^struct hash_desc *hash_desc_get(const char *name);$/;"	p	signature:(const char *name)
hash_desc_get	src/hash_desc.c	/^hash_desc_get(const char *hash_name)$/;"	f	signature:(const char *hash_name)
hash_desc_tbl	src/yarrow.c	/^struct hash_desc hash_desc_tbl[] = {$/;"	v	typeref:struct:hash_desc
hdesc	include/entropy_pool.h	/^	struct hash_desc *hdesc;$/;"	m	struct:entropy_pool	typeref:struct:entropy_pool::hash_desc	access:public
hdesc	include/prng.h	/^	struct hash_desc *hdesc;$/;"	m	struct:prng_context	typeref:struct:prng_context::hash_desc	access:public
head	lib/gost.h	/^	u_int8_t *head;$/;"	m	struct:gost_context	access:public
id	tester/serv_fifo.c	/^	int id;$/;"	m	struct:entropy_source	file:	access:public
id	tester/sock_serv.c	/^	int id;$/;"	m	struct:entropy_source	file:	access:public
idea	include/cipher_desc.h	/^	struct idea_context idea;$/;"	m	union:_cipher_ctx	typeref:struct:_cipher_ctx::idea_context	access:public
idea_context	lib/idea.h	/^struct idea_context $/;"	s
idea_context::key	lib/idea.h	/^	u_int16_t key[IDEA_KEY_NELEMS];$/;"	m	struct:idea_context	access:public
idea_context::tabl_key	lib/idea.h	/^	u_int16_t tabl_key[IDEA_ROUND_KEY_NELEMS];$/;"	m	struct:idea_context	access:public
idea_context_free	lib/idea.c	/^idea_context_free(struct idea_context **ctx)$/;"	f	signature:(struct idea_context **ctx)
idea_context_free	lib/idea.h	/^void idea_context_free(struct idea_context **ctx);$/;"	p	signature:(struct idea_context **ctx)
idea_context_new	lib/idea.c	/^idea_context_new()$/;"	f
idea_context_new	lib/idea.h	/^struct idea_context *idea_context_new();$/;"	p	signature:()
idea_decrypt	lib/idea.c	/^idea_decrypt(struct idea_context *dec, u_int16_t *block)$/;"	f	signature:(struct idea_context *dec, u_int16_t *block)
idea_decrypt	lib/idea.h	/^void idea_decrypt(struct idea_context *dec, u_int16_t *block);$/;"	p	signature:(struct idea_context *dec, u_int16_t *block)
idea_encrypt	lib/idea.c	/^idea_encrypt(struct idea_context *enc, u_int16_t *block)$/;"	f	signature:(struct idea_context *enc, u_int16_t *block)
idea_encrypt	lib/idea.h	/^void idea_encrypt(struct idea_context *enc, u_int16_t *block);$/;"	p	signature:(struct idea_context *enc, u_int16_t *block)
idea_invertkey	lib/idea.c	/^idea_invertkey(struct idea_context *ctx)$/;"	f	file:	signature:(struct idea_context *ctx)
idea_invertkey	lib/idea.c	/^static void idea_invertkey(struct idea_context  *ctx);$/;"	p	file:	signature:(struct idea_context *ctx)
idea_scrambling	lib/idea.c	/^idea_scrambling(struct idea_context *ctx, u_int16_t *block)$/;"	f	file:	signature:(struct idea_context *ctx, u_int16_t *block)
idea_scrambling	lib/idea.c	/^static void idea_scrambling(struct idea_context *ctx, u_int16_t *block);$/;"	p	file:	signature:(struct idea_context *ctx, u_int16_t *block)
idea_set_key	lib/idea.c	/^idea_set_key(struct idea_context *ctx, u_int16_t *key)$/;"	f	signature:(struct idea_context *ctx, u_int16_t *key)
idea_set_key	lib/idea.h	/^void idea_set_key(struct idea_context *ctx, u_int16_t *key);$/;"	p	signature:(struct idea_context *ctx, u_int16_t *key)
init	include/hash_desc.h	/^	void (*init)(void *ctx);$/;"	m	struct:hash_desc	access:public
init_peer	src/yarrow_init.c	/^init_peer(int fd, int i) $/;"	f	signature:(int fd, int i)
init_peer	tester/serv_fifo.c	/^init_peer(int fd, int i) $/;"	f	signature:(int fd, int i)
inv_mix_columns	lib/aes.c	/^inv_mix_columns(struct aes_context *ctx)$/;"	f	file:	signature:(struct aes_context *ctx)
inv_shift_rows	lib/aes.c	/^inv_shift_rows(struct aes_context *ctx)$/;"	f	file:	signature:(struct aes_context *ctx)
inv_sub_bytes	lib/aes.c	/^inv_sub_bytes(struct aes_context *ctx)$/;"	f	file:	signature:(struct aes_context *ctx)
k	include/entropy_pool.h	/^	int k;$/;"	m	struct:entropy_pool	access:public
k	src/yarrow_init.c	/^	int k;$/;"	m	struct:__anon5	file:	access:public
key	include/prng.h	/^	int key[8];$/;"	m	struct:prng_context	access:public
key	lib/aes.c	/^	u_int32_t	key[8];$/;"	m	struct:aes_context	file:	access:public
key	lib/gost.h	/^	u_int32_t key[8];$/;"	m	struct:gost_context	access:public
key	lib/idea.h	/^	u_int16_t key[IDEA_KEY_NELEMS];$/;"	m	struct:idea_context	access:public
key_expansion	lib/aes.c	/^key_expansion(struct aes_context *ctx)$/;"	f	file:	signature:(struct aes_context *ctx)
key_size	include/cipher_desc.h	/^	int key_size;$/;"	m	struct:cipher_desc	access:public
klen	lib/aes.c	/^	aes_key_len_t	klen;$/;"	m	struct:aes_context	file:	access:public
len	tester/serv_fifo.c	/^	int len;$/;"	m	struct:entropy_source	file:	access:public
len	tester/sock_serv.c	/^	int len;$/;"	m	struct:entropy_source	file:	access:public
logtab	lib/galois.c	/^static u_int8_t logtab[256];$/;"	v	file:
main	client_connect.c	/^int main (int argc, char **argv) $/;"	f	signature:(int argc, char **argv)
main	lib/stream.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	lib/test.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	src/test.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/yarrow_init.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tester/fifo.c	/^int main (int argc, char **argv) $/;"	f	signature:(int argc, char **argv)
main	tester/serv_fifo.c	/^int main (int argc, char **argv) $/;"	f	signature:(int argc, char **argv)
main	tester/sock_client.c	/^int main (int argc, char **argv) $/;"	f	signature:(int argc, char **argv)
main	tester/sock_serv.c	/^int main (int argc, char **argv) $/;"	f	signature:(int argc, char **argv)
main	tester/test.c	/^main (int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
md5	include/hash_desc.h	/^		struct md5_context md5; $/;"	m	union:_hash_ctx	typeref:struct:_hash_ctx::md5_context	access:public
md5_context	lib/md5.h	/^struct md5_context {$/;"	s
md5_context::buffer	lib/md5.h	/^	uint8_t	buffer[64];	\/* message buffer *\/$/;"	m	struct:md5_context	access:public
md5_context::nbits	lib/md5.h	/^	uint32_t	nbits[2];	\/* message size (in bits) *\/$/;"	m	struct:md5_context	access:public
md5_context::state	lib/md5.h	/^	uint32_t	state[4];	\/* state words *\/$/;"	m	struct:md5_context	access:public
md5_context_init	lib/md5.c	/^md5_context_init(struct md5_context *ctx)$/;"	f	signature:(struct md5_context *ctx)
md5_context_init	lib/md5.h	/^void md5_context_init(struct md5_context *ctx);$/;"	p	signature:(struct md5_context *ctx)
md5_final	lib/md5.c	/^md5_final(struct md5_context *ctx, unsigned char digest[16])$/;"	f	signature:(struct md5_context *ctx, unsigned char digest[16])
md5_final	lib/md5.h	/^void *md5_final(struct md5_context *ctx, unsigned char digest[16]);$/;"	p	signature:(struct md5_context *ctx, unsigned char digest[16])
md5_transform	lib/md5.c	/^md5_transform(u_int32_t state[4], const unsigned char block[64])$/;"	f	signature:(u_int32_t state[4], const unsigned char block[64])
md5_update	lib/md5.c	/^md5_update(struct md5_context *ctx, const void *msg, u_int32_t msglen)$/;"	f	signature:(struct md5_context *ctx, const void *msg, u_int32_t msglen)
md5_update	lib/md5.h	/^void md5_update(struct md5_context *ctx, const void *msg, uint32_t msglen);$/;"	p	signature:(struct md5_context *ctx, const void *msg, uint32_t msglen)
md5pad	lib/md5.c	/^static const unsigned char md5pad[64] = { 0x80 }; \/* Other 63 bytes are zeroes. *\/$/;"	v	file:
mix_columns	lib/aes.c	/^mix_columns(struct aes_context *ctx)$/;"	f	file:	signature:(struct aes_context *ctx)
monobit_test	client_connect.c	/^monobit_test(unsigned char *str, int len)$/;"	f	signature:(unsigned char *str, int len)
mul	lib/idea.c	/^static inline u_int16_t mul(u_int16_t a, u_int16_t b)$/;"	f	file:	signature:(u_int16_t a, u_int16_t b)
mul	lib/idea.c	/^static inline u_int16_t mul(u_int16_t a, u_int16_t b);$/;"	p	file:	signature:(u_int16_t a, u_int16_t b)
mulinv	lib/idea.c	/^mulinv(u_int16_t x)$/;"	f	signature:(u_int16_t x)
mulinv	lib/idea.h	/^u_int16_t mulinv(u_int16_t x);$/;"	p	signature:(u_int16_t x)
name	include/cipher_desc.h	/^	const char *name;$/;"	m	struct:cipher_desc	access:public
name	include/hash_desc.h	/^	const char *name;$/;"	m	struct:hash_desc	access:public
name	src/yarrow_init.c	/^	char *name;$/;"	m	struct:__anon4	file:	access:public
nb	lib/aes.c	/^	int		nb;$/;"	m	struct:aes_context	file:	access:public
nbits	lib/md5.h	/^	uint32_t	nbits[2];	\/* message size (in bits) *\/$/;"	m	struct:md5_context	access:public
nk	lib/aes.c	/^	int		nk;$/;"	m	struct:aes_context	file:	access:public
nr	lib/aes.c	/^	int		nr;$/;"	m	struct:aes_context	file:	access:public
nsources	include/entropy_pool.h	/^	int nsources;$/;"	m	struct:entropy_pool	access:public
nsources	src/yarrow_init.c	/^	int nsources;$/;"	m	struct:__anon5	file:	access:public
objects	Makefile	/^objects = yarrow_init.o yarrow.o feed_entropy.o prng.o cipher_desc.o hash_desc.o sock-unix.o$/;"	m
objects	lib/Makefile	/^objects = md5.o sha1.o sha256.o gost.o idea.o $/;"	m
opcode	src/yarrow_init.c	/^	ServerOpCodes opcode;$/;"	m	struct:__anon4	file:	access:public
opt_show_galois	lib/test.c	/^int opt_show_galois;	\/* print Galois GF(2^8) tables *\/$/;"	v
opt_show_ksch	lib/test.c	/^int opt_show_ksch;	\/* print key schedule *\/$/;"	v
opt_show_sbox	lib/test.c	/^int opt_show_sbox; 	\/* print S-Box and it's inverse *\/$/;"	v
opt_show_vec	lib/test.c	/^int opt_show_vec;	\/* test encrypt\/decrypt and print cipher state vector and key schedule *\/$/;"	v
options	src/yarrow_init.c	/^Options options;$/;"	v
packet	tester/fifo.c	/^char packet[128];$/;"	v
packet	tester/sock_client.c	/^char packet[128];$/;"	v
parce_attr	include/yarrow_init.h	/^int parce_attr(const char *path);$/;"	p	signature:(const char *path)
path	tester/serv_fifo.c	/^	char *path;$/;"	m	struct:entropy_source	file:	access:public
path	tester/sock_serv.c	/^	char *path;$/;"	m	struct:entropy_source	file:	access:public
path_to_src	src/yarrow_init.c	/^	char path_to_src[MAX_SOURCES][MAX_LENGHT_NAME]; \/\/paths to sources $/;"	m	struct:__anon5	file:	access:public
path_to_src	src/yarrow_init.c	/^	path_to_src,$/;"	e	enum:__anon3	file:
peer	src/yarrow_init.c	/^struct peer {$/;"	s	file:
peer	tester/serv_fifo.c	/^struct peer {$/;"	s	file:
peer	tester/sock_serv.c	/^struct peer {$/;"	s	file:
peer::buf	src/yarrow_init.c	/^	unsigned char buf[LINE_MAX+1];$/;"	m	struct:peer	file:	access:public
peer::buf	tester/serv_fifo.c	/^	char buf[LINE_MAX+1];$/;"	m	struct:peer	file:	access:public
peer::buf	tester/sock_serv.c	/^	char buf[LINE_MAX+1];$/;"	m	struct:peer	file:	access:public
peer::bufused	src/yarrow_init.c	/^	int bufused;$/;"	m	struct:peer	file:	access:public
peer::bufused	tester/serv_fifo.c	/^	int bufused;$/;"	m	struct:peer	file:	access:public
peer::bufused	tester/sock_serv.c	/^	int bufused;$/;"	m	struct:peer	file:	access:public
peer::sfd	src/yarrow_init.c	/^	int sfd;$/;"	m	struct:peer	file:	access:public
peer::sfd	tester/serv_fifo.c	/^	int sfd;$/;"	m	struct:peer	file:	access:public
peer::sfd	tester/sock_serv.c	/^	int sfd;$/;"	m	struct:peer	file:	access:public
peer_ctx	src/yarrow_init.c	/^} *peer_ctx;$/;"	v	typeref:struct:peer
peer_ctx	tester/serv_fifo.c	/^} *peer_ctx;$/;"	v	typeref:struct:peer
peer_ctx	tester/sock_serv.c	/^} *peer_ctx;$/;"	v	typeref:struct:peer
poll_fd	src/yarrow_init.c	/^struct pollfd *poll_fd;$/;"	v	typeref:struct:pollfd
poll_fd	tester/serv_fifo.c	/^struct pollfd *poll_fd;$/;"	v	typeref:struct:pollfd
poll_fd	tester/sock_serv.c	/^struct pollfd *poll_fd;$/;"	v	typeref:struct:pollfd
print_used	include/yarrow_init.h	/^static void print_used();$/;"	p	signature:()
print_used	src/yarrow_init.c	/^static void print_used()$/;"	f	file:
prng_cipher	src/yarrow_init.c	/^	char prng_cipher[16];$/;"	m	struct:__anon5	file:	access:public
prng_cipher_init	include/prng.h	/^int prng_cipher_init(const char *cipher_name, struct prng_context *prng);$/;"	p	signature:(const char *cipher_name, struct prng_context *prng)
prng_cipher_init	src/prng.c	/^int prng_cipher_init(const char *cipher_name, struct prng_context *prng)$/;"	f	signature:(const char *cipher_name, struct prng_context *prng)
prng_context	include/prng.h	/^struct prng_context {$/;"	s
prng_context::cdesc	include/prng.h	/^	struct cipher_desc *cdesc;$/;"	m	struct:prng_context	typeref:struct:prng_context::cipher_desc	access:public
prng_context::cipher_ctx	include/prng.h	/^	union _cipher_ctx *cipher_ctx;$/;"	m	struct:prng_context	typeref:union:prng_context::_cipher_ctx	access:public
prng_context::counter	include/prng.h	/^	u_int32_t counter[COUNTER_SIZE]; $/;"	m	struct:prng_context	access:public
prng_context::gate_param	include/prng.h	/^	int gate_param;$/;"	m	struct:prng_context	access:public
prng_context::hash_ctx	include/prng.h	/^	union _hash_ctx hash_ctx;$/;"	m	struct:prng_context	typeref:union:prng_context::_hash_ctx	access:public
prng_context::hdesc	include/prng.h	/^	struct hash_desc *hdesc;$/;"	m	struct:prng_context	typeref:struct:prng_context::hash_desc	access:public
prng_context::key	include/prng.h	/^	int key[8];$/;"	m	struct:prng_context	access:public
prng_context::random_storage	include/prng.h	/^	unsigned char random_storage[STORAGE_SIZE];$/;"	m	struct:prng_context	access:public
prng_context::time_param	include/prng.h	/^	int time_param;$/;"	m	struct:prng_context	access:public
prng_context::used	include/prng.h	/^	int used;	\/*number random byts in storage*\/$/;"	m	struct:prng_context	access:public
prng_encrypt	include/prng.h	/^void prng_encrypt(struct prng_context *prng, void *buf, size_t *size);$/;"	p	signature:(struct prng_context *prng, void *buf, size_t *size)
prng_encrypt	src/prng.c	/^void prng_encrypt(struct prng_context *prng, void *buf, size_t *size)$/;"	f	signature:(struct prng_context *prng, void *buf, size_t *size)
prng_generator_gate	include/prng.h	/^void prng_generator_gate(struct prng_context *prng);$/;"	p	signature:(struct prng_context *prng)
prng_generator_gate	src/prng.c	/^void prng_generator_gate(struct prng_context *prng)$/;"	f	signature:(struct prng_context *prng)
prng_get_time_param	include/prng.h	/^int prng_get_time_param(struct prng_context *prng);$/;"	p	signature:(struct prng_context *prng)
prng_get_time_param	src/prng.c	/^prng_get_time_param(struct prng_context *prng)$/;"	f	signature:(struct prng_context *prng)
prng_hash	src/yarrow_init.c	/^	char prng_hash[16];$/;"	m	struct:__anon5	file:	access:public
prng_hash_init	include/prng.h	/^int prng_hash_init(const char *hash_name, struct prng_context *prng);$/;"	p	signature:(const char *hash_name, struct prng_context *prng)
prng_hash_init	src/prng.c	/^int prng_hash_init(const char *hash_name, struct prng_context *prng)$/;"	f	signature:(const char *hash_name, struct prng_context *prng)
prng_next	include/prng.h	/^void prng_next(struct prng_context *prng);$/;"	p	signature:(struct prng_context *prng)
prng_next	src/prng.c	/^void prng_next(struct prng_context *prng)$/;"	f	signature:(struct prng_context *prng)
prng_reseed	include/prng.h	/^int prng_reseed(struct prng_context *prng, const struct entropy_pool *pool);$/;"	p	signature:(struct prng_context *prng, const struct entropy_pool *pool)
prng_reseed	src/prng.c	/^prng_reseed(struct prng_context *prng, const struct entropy_pool *pool)$/;"	f	signature:(struct prng_context *prng, const struct entropy_pool *pool)
prng_set_time_param	include/prng.h	/^int prng_set_time_param(struct prng_context *prng, int time_param);$/;"	p	signature:(struct prng_context *prng, int time_param)
prng_set_time_param	src/prng.c	/^prng_set_time_param(struct prng_context *prng, int time_param)$/;"	f	signature:(struct prng_context *prng, int time_param)
process_events	src/yarrow_init.c	/^process_events(int count, struct prng_context *prng) $/;"	f	signature:(int count, struct prng_context *prng)
process_events	tester/serv_fifo.c	/^process_events(int count) $/;"	f	signature:(int count)
process_events	tester/sock_serv.c	/^process_events(int count) $/;"	f	signature:(int count)
process_server_config	src/yarrow_init.c	/^int process_server_config(const char *filename)$/;"	f	signature:(const char *filename)
program_name	src/yarrow_init.c	/^static const char	*program_name;$/;"	v	file:
random_storage	include/prng.h	/^	unsigned char random_storage[STORAGE_SIZE];$/;"	m	struct:prng_context	access:public
read_fd	tester/serv_fifo.c	/^read_fd(int fd, struct peer *p) $/;"	f	signature:(int fd, struct peer *p)
read_fd	tester/sock_serv.c	/^read_fd(int fd, struct peer *p) $/;"	f	signature:(int fd, struct peer *p)
read_request	src/yarrow_init.c	/^read_request(int fd, struct peer *p) $/;"	f	signature:(int fd, struct peer *p)
received_sigchld	src/yarrow_init.c	/^int received_sigchld = 0;$/;"	v
received_sigterm	src/yarrow_init.c	/^int received_sigterm = 0;$/;"	v
request_send	tester/fifo.c	/^request_send(const char *buf)$/;"	f	signature:(const char *buf)
request_send	tester/sock_client.c	/^request_send(const char *buf)$/;"	f	signature:(const char *buf)
return_if_fail	include/macros.h	20;"	d
return_if_fail	include/macros.h	57;"	d
return_if_fail	lib/macros.h	20;"	d
return_if_fail	lib/macros.h	57;"	d
return_val_if_fail	include/macros.h	32;"	d
return_val_if_fail	include/macros.h	58;"	d
return_val_if_fail	lib/macros.h	32;"	d
return_val_if_fail	lib/macros.h	58;"	d
rijndael_isbox	lib/sbox.c	/^unsigned char rijndael_isbox[256];$/;"	v
rijndael_sbox	lib/sbox.c	/^unsigned char rijndael_sbox[256];$/;"	v
rijndael_sbox_init	lib/sbox.c	/^rijndael_sbox_init()$/;"	f
rijndael_sbox_init	lib/sbox.h	/^void rijndael_sbox_init();$/;"	p	signature:()
rijndael_sbox_print	lib/sbox.c	/^rijndael_sbox_print()$/;"	f
rijndael_sbox_print	lib/sbox.h	/^void rijndael_sbox_print();$/;"	p	signature:()
rot_word	lib/aes.c	/^rot_word(u_int32_t x)$/;"	f	file:	signature:(u_int32_t x)
sbox	lib/gost.h	/^	u_int8_t *sbox;$/;"	m	struct:gost_context	access:public
sbox_default	lib/gost.c	/^static u_int8_t sbox_default[] = {$/;"	v	file:
set_key	include/cipher_desc.h	/^	void (*set_key)(void *ctx, void *key);$/;"	m	struct:cipher_desc	access:public
set_program_name	include/yarrow_init.h	/^static void set_program_name();$/;"	p	signature:()
set_program_name	src/yarrow_init.c	/^static void set_program_name(int argc, char *argv[])$/;"	f	file:	signature:(int argc, char *argv[])
sfd	src/yarrow_init.c	/^	int sfd;$/;"	m	struct:peer	file:	access:public
sfd	tester/serv_fifo.c	/^	int sfd;$/;"	m	struct:peer	file:	access:public
sfd	tester/sock_serv.c	/^	int sfd;$/;"	m	struct:peer	file:	access:public
sha1	include/hash_desc.h	/^		struct sha1_context sha1;$/;"	m	union:_hash_ctx	typeref:struct:_hash_ctx::sha1_context	access:public
sha1_context	lib/sha1.h	/^struct sha1_context {$/;"	s
sha1_context::buffer	lib/sha1.h	/^        u_int8_t         buffer[64];     \/* 512-bit message buffer *\/$/;"	m	struct:sha1_context	access:public
sha1_context::count	lib/sha1.h	/^        u_int32_t        count[2];       \/* data length counter *\/$/;"	m	struct:sha1_context	access:public
sha1_context::state	lib/sha1.h	/^        u_int32_t        state[5];       \/* H(i) hash state *\/$/;"	m	struct:sha1_context	access:public
sha1_context_init	lib/sha1.c	/^sha1_context_init(struct sha1_context *ctx)$/;"	f	signature:(struct sha1_context *ctx)
sha1_context_init	lib/sha1.h	/^void sha1_context_init(struct sha1_context *ctx);$/;"	p	signature:(struct sha1_context *ctx)
sha1_final	lib/sha1.c	/^sha1_final(struct sha1_context *ctx, unsigned char digest[20])$/;"	f	signature:(struct sha1_context *ctx, unsigned char digest[20])
sha1_final	lib/sha1.h	/^void *sha1_final(struct sha1_context *ctx, unsigned char digest[20]);$/;"	p	signature:(struct sha1_context *ctx, unsigned char digest[20])
sha1_hash	lib/sha1.c	/^sha1_hash(u_int32_t s[8], const unsigned char buffer[64])$/;"	f	signature:(u_int32_t s[8], const unsigned char buffer[64])
sha1_update	lib/sha1.c	/^sha1_update(struct sha1_context *ctx, const void *msg, u_int32_t msglen)$/;"	f	signature:(struct sha1_context *ctx, const void *msg, u_int32_t msglen)
sha1_update	lib/sha1.h	/^void sha1_update(struct sha1_context *ctx, const void *msg, u_int32_t len);$/;"	p	signature:(struct sha1_context *ctx, const void *msg, u_int32_t len)
sha256	include/hash_desc.h	/^		struct sha256_context sha256;$/;"	m	union:_hash_ctx	typeref:struct:_hash_ctx::sha256_context	access:public
sha256_context	lib/sha256.h	/^struct sha256_context {$/;"	s
sha256_context::buffer	lib/sha256.h	/^        uint8_t         buffer[64];     \/* 512-bit message buffer *\/$/;"	m	struct:sha256_context	access:public
sha256_context::count	lib/sha256.h	/^        uint32_t        count[2];       \/* data length counter *\/$/;"	m	struct:sha256_context	access:public
sha256_context::state	lib/sha256.h	/^        uint32_t        state[8];       \/* H(i) hash state *\/$/;"	m	struct:sha256_context	access:public
sha256_context_init	lib/sha256.c	/^sha256_context_init(struct sha256_context *ctx)$/;"	f	signature:(struct sha256_context *ctx)
sha256_context_init	lib/sha256.h	/^void sha256_context_init(struct sha256_context *ctx);$/;"	p	signature:(struct sha256_context *ctx)
sha256_final	lib/sha256.c	/^sha256_final(struct sha256_context *ctx, unsigned char digest[32])$/;"	f	signature:(struct sha256_context *ctx, unsigned char digest[32])
sha256_final	lib/sha256.h	/^void *sha256_final(struct sha256_context *ctx, unsigned char digest[32]);$/;"	p	signature:(struct sha256_context *ctx, unsigned char digest[32])
sha256_hash	lib/sha256.c	/^sha256_hash(uint32_t s[8], const unsigned char buffer[64])$/;"	f	signature:(uint32_t s[8], const unsigned char buffer[64])
sha256_update	lib/sha256.c	/^sha256_update(struct sha256_context *ctx, const void *msg, u_int32_t msglen)$/;"	f	signature:(struct sha256_context *ctx, const void *msg, u_int32_t msglen)
sha256_update	lib/sha256.h	/^void sha256_update(struct sha256_context *ctx, const void *msg, uint32_t len);$/;"	p	signature:(struct sha256_context *ctx, const void *msg, uint32_t len)
shift_rows	lib/aes.c	/^shift_rows(struct aes_context *ctx)$/;"	f	file:	signature:(struct aes_context *ctx)
show_key_schedule	lib/test.c	/^show_key_schedule()$/;"	f
sigterm_handler	src/yarrow_init.c	/^sigterm_handler(int sig) $/;"	f	file:	signature:(int sig)
size_adaptor	include/prng.h	/^void size_adaptor(unsigned char *digest, struct prng_context *prng);$/;"	p	signature:(unsigned char *digest, struct prng_context *prng)
size_adaptor	src/prng.c	/^size_adaptor(unsigned char *digest, struct prng_context *prng)$/;"	f	signature:(unsigned char *digest, struct prng_context *prng)
slow_pool	src/test.c	/^struct entropy_pool fast_pool, slow_pool;$/;"	v	typeref:struct:
slow_pool	src/yarrow_init.c	/^struct entropy_pool fast_pool, slow_pool;$/;"	v	typeref:struct:
sock_block	include/sock-unix.h	/^void sock_block(int sock);$/;"	p	signature:(int sock)
sock_block	src/sock-unix.c	/^void sock_block(int sock)$/;"	f	signature:(int sock)
sock_nonblock	include/sock-unix.h	/^void sock_nonblock(int sock);$/;"	p	signature:(int sock)
sock_nonblock	src/sock-unix.c	/^void sock_nonblock(int sock)$/;"	f	signature:(int sock)
sock_nonblock	tester/serv_fifo.c	/^void sock_nonblock(int sock)$/;"	f	signature:(int sock)
sock_nonblock	tester/sock_serv.c	/^void sock_nonblock(int sock)$/;"	f	signature:(int sock)
sock_unix_close	include/sock-unix.h	/^int sock_unix_close(int sock);$/;"	p	signature:(int sock)
sock_unix_close	src/sock-unix.c	/^int sock_unix_close(int sock)$/;"	f	signature:(int sock)
sock_unix_close	tester/serv_fifo.c	/^int sock_unix_close(int sock)$/;"	f	signature:(int sock)
sock_unix_close	tester/sock_serv.c	/^int sock_unix_close(int sock)$/;"	f	signature:(int sock)
sock_unix_connect	client_connect.c	/^int sock_unix_connect(const char *path)$/;"	f	signature:(const char *path)
sock_unix_connect	include/sock-unix.h	/^int sock_unix_connect(const char *path);$/;"	p	signature:(const char *path)
sock_unix_connect	src/sock-unix.c	/^int sock_unix_connect(const char *path)$/;"	f	signature:(const char *path)
sock_unix_connect	tester/sock_client.c	/^int sock_unix_connect(const char *path)$/;"	f	signature:(const char *path)
sock_unix_listen	include/sock-unix.h	/^int sock_unix_listen(const char *path);$/;"	p	signature:(const char *path)
sock_unix_listen	src/sock-unix.c	/^int sock_unix_listen(const char *path)$/;"	f	signature:(const char *path)
sock_unix_listen	tester/serv_fifo.c	/^int sock_unix_listen(const char *path)$/;"	f	signature:(const char *path)
sock_unix_listen	tester/sock_serv.c	/^int sock_unix_listen(const char *path)$/;"	f	signature:(const char *path)
state	lib/aes.c	/^	u_int32_t	state[AES_NB];$/;"	m	struct:aes_context	file:	access:public
state	lib/md5.h	/^	uint32_t	state[4];	\/* state words *\/$/;"	m	struct:md5_context	access:public
state	lib/sha1.h	/^        u_int32_t        state[5];       \/* H(i) hash state *\/$/;"	m	struct:sha1_context	access:public
state	lib/sha256.h	/^        uint32_t        state[8];       \/* H(i) hash state *\/$/;"	m	struct:sha256_context	access:public
sthreshold	src/yarrow_init.c	/^	float sthreshold[MAX_SOURCES];$/;"	m	struct:__anon5	file:	access:public
sthreshold	src/yarrow_init.c	/^	sthreshold$/;"	e	enum:__anon3	file:
strdelim	src/yarrow_init.c	/^strdelim(char **s)$/;"	f	signature:(char **s)
sub_bytes	lib/aes.c	/^sub_bytes(struct aes_context *ctx)$/;"	f	file:	signature:(struct aes_context *ctx)
sub_word	lib/aes.c	/^sub_word(u_int32_t x)$/;"	f	file:	signature:(u_int32_t x)
sum	lib/idea.c	/^static inline u_int16_t sum(u_int16_t a, u_int16_t b)$/;"	f	file:	signature:(u_int16_t a, u_int16_t b)
sum	lib/idea.c	/^static inline u_int16_t sum(u_int16_t a, u_int16_t b);$/;"	p	file:	signature:(u_int16_t a, u_int16_t b)
tabl_key	lib/idea.h	/^	u_int16_t tabl_key[IDEA_ROUND_KEY_NELEMS];$/;"	m	struct:idea_context	access:public
tail	lib/gost.h	/^	u_int8_t *tail;$/;"	m	struct:gost_context	access:public
test_lib	lib/test.c	/^test_lib()$/;"	f
threshold	include/entropy_pool.h	/^	float threshold[MAX_SOURCES];$/;"	m	struct:entropy_pool	access:public
time_param	include/prng.h	/^	int time_param;$/;"	m	struct:prng_context	access:public
time_param	src/yarrow_init.c	/^	int time_param;$/;"	m	struct:__anon5	file:	access:public
u_int16_t	include/common.h	/^  typedef uint16_t	u_int16_t;$/;"	t
u_int16_t	lib/common.h	/^typedef uint16_t	u_int16_t;$/;"	t
u_int32_t	include/common.h	/^  typedef uint32_t	u_int32_t;$/;"	t
u_int32_t	lib/common.h	/^typedef uint32_t	u_int32_t;$/;"	t
u_int8_t	include/common.h	/^  typedef uint8_t	u_int8_t;$/;"	t
u_int8_t	lib/common.h	/^typedef uint8_t		u_int8_t;$/;"	t
uint32_to_bytes	lib/md5.c	/^uint32_to_bytes(unsigned char *out, const u_int32_t *in, unsigned int n)$/;"	f	file:	signature:(unsigned char *out, const u_int32_t *in, unsigned int n)
uint32_to_bytes	lib/sha1.c	/^uint32_to_bytes(unsigned char *out, const u_int32_t *in, unsigned int n)$/;"	f	file:	signature:(unsigned char *out, const u_int32_t *in, unsigned int n)
uint32_to_bytes	lib/sha256.c	/^uint32_to_bytes(unsigned char *out, const u_int32_t *in, unsigned int n)$/;"	f	file:	signature:(unsigned char *out, const u_int32_t *in, unsigned int n)
update	include/hash_desc.h	/^	void (*update)(void *ctx, const void *buf, size_t len);$/;"	m	struct:hash_desc	access:public
used	include/prng.h	/^	int used;	\/*number random byts in storage*\/$/;"	m	struct:prng_context	access:public
w	lib/aes.c	/^	u_int32_t	w[AES_NB*(AES_NR_MAX+1)];$/;"	m	struct:aes_context	file:	access:public
write_fd	tester/serv_fifo.c	/^write_fd(int fd, struct peer *p)$/;"	f	signature:(int fd, struct peer *p)
write_fd	tester/sock_serv.c	/^write_fd(int fd, struct peer *p)$/;"	f	signature:(int fd, struct peer *p)
xfree	src/yarrow_init.c	/^void xfree(void *ptr)$/;"	f	signature:(void *ptr)
xfree	tester/serv_fifo.c	/^void xfree(void *ptr)$/;"	f	signature:(void *ptr)
xfree	tester/sock_serv.c	/^void xfree(void *ptr)$/;"	f	signature:(void *ptr)
xrealloc0	src/yarrow_init.c	/^void *xrealloc0(void *mem, size_t old_size, size_t new_size)$/;"	f	signature:(void *mem, size_t old_size, size_t new_size)
xrealloc0	tester/serv_fifo.c	/^void *xrealloc0(void *mem, size_t old_size, size_t new_size)$/;"	f	signature:(void *mem, size_t old_size, size_t new_size)
xrealloc0	tester/sock_serv.c	/^void *xrealloc0(void *mem, size_t old_size, size_t new_size)$/;"	f	signature:(void *mem, size_t old_size, size_t new_size)
xstrncpy	src/sock-unix.c	/^char *xstrncpy(char *dst, const char *src, size_t max)$/;"	f	signature:(char *dst, const char *src, size_t max)
yarrowd	src/yarrowd.c	/^yarrowd()$/;"	f
